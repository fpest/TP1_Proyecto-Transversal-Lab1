/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import control.AlumnoData;
import control.InscripcionData;
import control.MateriaData;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Alumno;
import modelo.Materia;
import modelo.Nota;

/**
 *
 * @author juani
 */
public class RegistroNotas extends javax.swing.JInternalFrame {

    MateriaData materiaData;
    AlumnoData alumnoData;
    InscripcionData inscripcionData;
    ArrayList<Alumno> listaAlumnos = new ArrayList<>();
    ArrayList<Materia> listaMaterias = new ArrayList<>();
    ArrayList<Nota> listaNotas = new ArrayList<>();
    boolean alumnoSeleccionado;
    Alumno alumno;

    /* 
    Esto para llenar Tabla
     DefaultTableModel model = (DefaultTableModel) jTblClienteTelefonoPorApellido.getModel();
        model.addRow(new Object[]{cliente.getDni(), cliente.getApellido(), cliente.getNombre(), cliente.getDireccion(), cliente.getCiudad(), telefono});
    
    Esto para borrar todos las filas de la tabla
      DefaultTableModel model = (DefaultTableModel) jTblClienteTelefonoPorApellido.getModel();
        model.setRowCount(0);
     */
    /**
     * Creates new form RegistroNotas
     */
    public RegistroNotas(AlumnoData alumnoData, MateriaData materiaData, InscripcionData inscripcionData) {
        initComponents();
        limpiarCampos();
        this.alumnoData = alumnoData;
        this.materiaData = materiaData;
        this.inscripcionData = inscripcionData;
        listaAlumnos = (ArrayList) alumnoData.obtenerAlumnos();
        llenarListaAlumnos();
    }

    public void limpiarCampos() {
        txtAlumno.setText("");
        txtNota.setText("");
        txtNota.setEnabled(false);
        txtMateria.setText("");
        DefaultTableModel model = (DefaultTableModel) tblNotas.getModel();
        model.setRowCount(0);

    }

    public void llenarListaAlumnos() {
        if (txtAlumno.getText() != "") {
            listaAlumnos = (ArrayList) alumnoData.obtenerAlumnos(txtAlumno.getText());
        } else {
            listaAlumnos = (ArrayList) alumnoData.obtenerAlumnos();
        }

        lstAlumnos.removeAll();

        int largoLista = listaAlumnos.size();
                //    String[] apellidoNombre = new String[largoLista];
        Alumno[] apellidoNombre = new Alumno[largoLista];
        int i = 0;

        for (Alumno alumno : listaAlumnos) {
            if (alumno.isActivo()) {
                apellidoNombre[i] = alumno;
                i++;
            }
        }

        lstAlumnos.setModel(new javax.swing.AbstractListModel<Alumno>() {
            public int getSize() {
                return listaAlumnos.size();
            }

            public Alumno getElementAt(int i) {
                return apellidoNombre[i];
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNotas = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtAlumno = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNotas = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAlumnos = new javax.swing.JList<>();
        txtMateria = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNota = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        btnBuscarNuevo = new javax.swing.JButton();

        setClosable(true);
        setTitle("Carga de notas");

        panelNotas.setBackground(new java.awt.Color(204, 204, 204));

        jLabel8.setFont(new java.awt.Font("Myanmar Text", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Alumno por Nombre/Legajo");

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Myanmar Text", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CARGAR NOTAS");

        txtAlumno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAlumnoKeyReleased(evt);
            }
        });

        tblNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Materia", "Nota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNotas.setShowGrid(false);
        tblNotas.getTableHeader().setReorderingAllowed(false);
        tblNotas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNotasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblNotas);
        if (tblNotas.getColumnModel().getColumnCount() > 0) {
            tblNotas.getColumnModel().getColumn(0).setResizable(false);
            tblNotas.getColumnModel().getColumn(1).setResizable(false);
        }

        lstAlumnos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAlumnos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAlumnosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAlumnos);

        txtMateria.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Materia:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Nota:");

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnBuscarNuevo.setText("Buscar Nuevo");
        btnBuscarNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNotasLayout = new javax.swing.GroupLayout(panelNotas);
        panelNotas.setLayout(panelNotasLayout);
        panelNotasLayout.setHorizontalGroup(
            panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelNotasLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                        .addComponent(txtAlumno, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(btnBuscarNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMateria)
                    .addComponent(txtNota)
                    .addGroup(panelNotasLayout.createSequentialGroup()
                        .addGroup(panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNotasLayout.createSequentialGroup()
                        .addGap(0, 71, Short.MAX_VALUE)
                        .addGroup(panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRegistrar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        panelNotasLayout.setVerticalGroup(
            panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNotasLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelNotasLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegistrar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(panelNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnBuscarNuevo))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelNotas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelNotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtAlumnoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAlumnoKeyReleased
        alumnoSeleccionado = false;
        alumno = null;

        llenarListaAlumnos();
    }//GEN-LAST:event_txtAlumnoKeyReleased

    private void llenarTablaNotas(Alumno alumno) {
        DefaultTableModel model = (DefaultTableModel) tblNotas.getModel();
        model.setRowCount(0);

        ArrayList<Nota> listaNotas = inscripcionData.buscarNotas(alumno);

        for (Nota nota : listaNotas) {

            // DefaultTableModel model = (DefaultTableModel) tblNotas.getModel();
            model.addRow(new Object[]{nota, nota.getNota()});

        }

    }


    private void lstAlumnosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAlumnosValueChanged
        
            try{
            if (!lstAlumnos.isSelectionEmpty()) {
            alumnoSeleccionado = true;
            txtAlumno.setText(lstAlumnos.getSelectedValue().toString());
            alumno = lstAlumnos.getSelectedValue();
             llenarTablaNotas(alumno);
            }
           }catch(NullPointerException ex){
           JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la lista.");
                    }
            
            

    }//GEN-LAST:event_lstAlumnosValueChanged

    private void tblNotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNotasMouseClicked
        txtMateria.setText(tblNotas.getValueAt(tblNotas.getSelectedRow(), 0).toString());
        txtNota.setText("");
        txtNota.setEnabled(true);
        txtNota.requestFocus();

    }//GEN-LAST:event_tblNotasMouseClicked

    private boolean validarCampos() {
        boolean validado = true;
        try {
            Double modelo = Double.parseDouble(txtNota.getText());
            if (modelo<0 || modelo>10){
                JOptionPane.showMessageDialog(null, "El valor de la Nota debe ser un numero entre 0 y 10.");
                validado = false;
                
            }
        } catch (NumberFormatException nf) {

            JOptionPane.showMessageDialog(null, "Debe ingresar sólo números en el registo de la Nota.");
            validado = false;
        }

        if (txtMateria.getText().isEmpty() || txtNota.getText().isEmpty()) {
            if (validado) {
                JOptionPane.showMessageDialog(null, "Los Campos Materia y Nota deben estar llenos.");
            }
            validado = false;
        }

        return validado;
    }


    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed

        if (validarCampos()) {
            Nota nota = new Nota();
            nota = (Nota) tblNotas.getValueAt(tblNotas.getSelectedRow(), 0);

            if (inscripcionData.registrarNota(nota.getIdInscripcion(), Double.parseDouble(txtNota.getText()))) {
                JOptionPane.showMessageDialog(null, "Se registró correctamente la Nota.");
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo registrar la Nota.");
            }
           limpiarCampos();
        } else {
           
            txtNota.requestFocus();
        }
        txtNota.setText("");

    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnBuscarNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNuevoActionPerformed
        limpiarCampos();
        txtAlumno.requestFocus();
    }//GEN-LAST:event_btnBuscarNuevoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarNuevo;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Alumno> lstAlumnos;
    private javax.swing.JPanel panelNotas;
    private javax.swing.JTable tblNotas;
    private javax.swing.JTextField txtAlumno;
    private javax.swing.JTextField txtMateria;
    private javax.swing.JTextField txtNota;
    // End of variables declaration//GEN-END:variables
}
